generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

generator typegen {
  provider = "node ./prisma/generators/dist/typeGenerator.js"
  output   = "../../shared/generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id       Int    @id @default(autoincrement())
  name     String @unique
  tag      String @unique
  capacity Int
  rooms    Room[]
}

model Room {
  id         Int        @id @default(autoincrement())
  name       String     @unique
  status     RoomStatus @default(CLEAN)
  category   Category   @relation(fields: [categoryId], references: [id])
  categoryId Int
  bookings   Booking[]
}

model DocumentType {
  id        Int                @id @default(autoincrement())
  name      String             @unique
  documents IdentityDocument[]
}

model IdentityDocument {
  id           Int          @id @default(autoincrement())
  type         DocumentType @relation(fields: [typeId], references: [id])
  typeId       Int
  firstName    String
  lastName     String
  parentName   String?
  gender       Gender
  birthdate    DateTime
  number       String
  issuedBy     String?
  issuedByCode String?
  issuedAt     DateTime?
  expiresAt    DateTime?
  guest        Guest?
}

model Guest {
  id          Int       @id @default(autoincrement())
  firstName   String
  lastName    String
  parentName  String?
  gender      Gender?
  birthdate   DateTime?
  phone       String?
  email       String?
  citizenship String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  identityDocument   IdentityDocument? @relation(fields: [identityDocumentId], references: [id])
  identityDocumentId Int?              @unique

  bookings     Booking[] @relation("BookingGuests")
  mainBookings Booking[] @relation("MainGuest")
}

model Booking {
  id        Int           @id @default(autoincrement())
  start     DateTime
  end       DateTime
  status    BookingStatus @default(ACTIVE)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  room   Room @relation(fields: [roomId], references: [id])
  roomId Int

  guests      Guest[] @relation("BookingGuests")
  mainGuest   Guest   @relation("MainGuest", fields: [mainGuestId], references: [id])
  mainGuestId Int

  folios Folio[]
}

model Folio {
  id        Int         @id @default(autoincrement())
  booking   Booking     @relation(fields: [bookingId], references: [id])
  bookingId Int
  items     FolioItem[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model FolioItem {
  id            Int      @id @default(autoincrement())
  folio         Folio    @relation(fields: [folioId], references: [id])
  folioId       Int
  service       Service  @relation(fields: [serviceId], references: [id])
  serviceId     Int
  payment       Payment? @relation(fields: [paymentId], references: [id])
  paymentId     Int?
  quantity      Int
  unitPrice     Decimal
  totalPrice    Decimal
  dateOfService DateTime
  createdAt     DateTime @default(now())
}

model Service {
  id         Int           @id @default(autoincrement())
  name       String        @unique
  price      Decimal
  isActive   Boolean       @default(true)
  group      ServiceGroup? @relation(fields: [groupId], references: [id])
  groupId    Int?
  folioItems FolioItem[]
}

model ServiceGroup {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  services Service[]
}

model Payment {
  id        Int           @id @default(autoincrement())
  method    PaymentMethod
  amount    Decimal
  createdAt DateTime      @default(now())
  items     FolioItem[]
}

enum BookingStatus {
  CHECKED_IN
  CHECKED_OUT
  ACTIVE
  CANCELED
}

enum RoomStatus {
  CLEAN
  DIRTY
}

enum Gender {
  MALE
  FEMALE
}

enum PaymentMethod {
  CASH
  CARD
  EXTERNAL
}
